#!/usr/bin/perl
###############################################################################
##    Copyright (C) 2001 by Paul Miller
##    initial code from http://voltar.org/rpmerizor
##    current maintener :  Eric Gerbier
##    Bug reports to: gerbier@users.sourceforge.net
##    url : http://freshmeat.net/projects/rpmerizor
##
##    This program is free software; you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation; either version 2 of the License, or
##    (at your option) any later version.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
################################################################################
# build an rpm package from installed files

use strict;
use warnings;
use English qw(-no_match_vars);
use Getopt::Long;      # arg analysis
use Cwd 'abs_path';    # abs_path
use File::Find;        # find
use File::Path;        # mkpath
use File::Basename;    # basename
use Pod::Usage;

my %opt;               # command line options
my $Version = '2.6';   # see also in pod text

# for wanted
my %files  = ();
my %dirs   = ();
my %others = ();

# patterns for config file
my @config_pattern = ( '\.conf', '\.cfg', '\.config', '\.xml', '\.ini', );

# patterns for doc files
my @doc_pattern = (
	'\.doc',   '\.txt', '\.tex',   '\.html',    'readme',  'license',
	'license', 'todo',  'authors', 'changelog', 'copying', 'install',
	'news',
);

# list of mandatory meta_data
my @meta_data =
  ( 'name', 'version', 'release', 'group', 'summary', 'description', );
#########################################################
# specfile template
my $template = <<'EOF';
# specfile generated by rpmerizor (http://sourceforge.net/projects/rpmerizor/)

# if you are using __spec_only and want to build rpm package
# after, from command line, you have to use the following syntaxe
# rpmbuild -bb --buildroot=/tmp/rpmerizor_buildroot your_specfile.spec

# for compatibility with old md5 digest
# %global _binary_filedigest_algorithm 1
# %global _source_filedigest_algorithm 1

%define defaultbuildroot /
# Do not try autogenerate prereq/conflicts/obsoletes and check files
%undefine __check_files
%undefine __find_prereq
%undefine __find_conflicts
%undefine __find_obsoletes
# Be sure buildpolicy set to do nothing
%define __spec_install_post %{nil}
# Something that need for rpm-4.1
%define _missing_doc_files_terminate_build 0

%define name    _NAME_
%define version _VERSION_

Summary: _SUMMARY_
Name: %{name}
Version: %{version}
Release: _RELEASE_
Group: _GROUP_
BuildArch: _BUILDARCH_
URL: _URL_
Packager: _PACKAGER_
Vendor: _VENDOR_
License: _LICENSE_

AutoReqProv: _AUTOREQPROV_

%description
_DESCRIPTION_

%prep
rm -f /tmp/rpmerizor_buildroot
ln -s _ROOTDIR_ /tmp/rpmerizor_buildroot

%clean
rm -f /tmp/rpmerizor_buildroot

%files
_FILES_
EOF
#########################################################
sub debug($) {
	my $text = shift @_;

	print "DEBUG : $text\n" if ( $opt{'debug'} );
	return;
}
#########################################################
# display software version
sub display_version() {
	print "rpmerizor version $Version\n";
	print "GPL license\n";
	return;
}
#########################################################
sub is_config($) {
	my $filename = shift @_;    # full path to file

	my $ret = 0;
	if ( $filename =~ m{^/etc/} ) {
		$ret = 1;
	}
	else {
		foreach my $pat (@config_pattern) {
			if ( $filename =~ m/$pat/i ) {
				$ret = 1;
				last;
			}
		}
	}
	return $ret;
}
#########################################################
sub is_doc($) {
	my $filename = shift @_;    # full path to file

	my $ret = 0;
	foreach my $pat (@doc_pattern) {
		if ( $filename =~ m/$pat/i ) {
			$ret = 1;
			last;
		}
	}
	return $ret;
}
#########################################################
# search for a command in PATH variable
sub search_in_path($) {
	my $prog = shift @_;

	foreach ( split /:/, $ENV{'PATH'} ) {
		if ( -x "$_/$prog" ) {
			return "$_/$prog";
		}
	}
	return;
}
#########################################################
sub set_option($$$) {
	my $rh_opt = shift @_;
	my $key    = shift @_;
	my $value  = shift @_;

#	if ( !$rh_opt->{$key} ) {
		debug("set_option set $key to $value");
		$rh_opt->{$key} = $value;
#	}
	return;
}
#########################################################
# parse command line options
sub parse_otions() {
	Getopt::Long::Configure('no_ignore_case');
	if (
		!GetOptions(
			\%opt,
			'help|h',
			'man',
			'Version|V',
			'verbose',
			'debug',
			'buildall',
			'edit_spec|e',
			'spec_only',
			'sign',
			'list_group',
			'exclude=s',
			'rootdir=s',
			'compat',
			'default',
			'guess',
			'stdin',
			'autoreqprov=s',
			'noautoreqprov',

			# spec meta-data
			'name=s',
			'version=s',
			'release=s',
			'group=s',
			'summary=s',
			'description=s',
			'buildarch=s',
			'url=s',
			'packager=s',
			'vendor=s',
			'license=s',
		)
	  )
	{
		warn "ERROR : bad options\n";
		pod2usage(1);
		exit;
	}

	# all display and exit options
	## no critic (ProhibitCascadingIfElse)
	if ( $opt{'help'} ) {
		pod2usage(1);
		exit;
	}
	elsif ( $opt{'man'} ) {
		pod2usage( -verbose => 2 );
		exit;
	}
	elsif ( $opt{'Version'} ) {
		display_version();
		exit;
	}
	elsif ( $opt{'list_group'} ) {
		exec "rpm -qa --queryformat '%{GROUP}\n' | sort -u";
	}

	if ( $opt{'guess'} ) {

		$opt{'default'} = 1;    # force default

		# guess from first arg
		my @input = @ARGV;

		my $first_arg = $input[0];
		if ($first_arg) {
			my $name = basename($first_arg);
			debug("guess name $name");
			if ( $name =~ m/(\w+)-(.*)/ ) {
				set_option( \%opt, 'name',    $1 );
				set_option( \%opt, 'version', $2 );
			}
			else {
				set_option( \%opt, 'name', $name );

				# set a default version
				set_option( \%opt, 'version', 'unknown' );
			}

			# not very usefull !
			set_option( \%opt, 'summary', $name );
			set_option( \%opt, 'description',
				"automatic description for $name" );
		}
		else {
			warn "WARNING : no arg found\n";
		}
	}

	if ( $opt{'default'} ) {

		set_option( \%opt, 'release', 1 );
		set_option( \%opt, 'group',   'rpmerizor' );
	}

	if ( $opt{'rootdir'} ) {

		# check if directory exists
		if ( !-d $opt{'rootdir'} ) {
			die "ERROR : can not find directory $opt{'rootdir'}\n";
		}

		# convert in full path
		$opt{'rootdir'} = abs_path( $opt{'rootdir'} );

		# remove trailing /
		$opt{'rootdir'} =~ s/\/$//;
	}
	elsif ( $opt{'stdin'} ) {

		# all meta data should be given from command line
		# because stdin is used for files/directories

		foreach my $key (@meta_data) {
			if ( !$opt{$key} ) {
				warn "WARNING : you must use command line option $key\n";
				pod2usage(1);
				exit;
			}
		}
	}

#	if ( $opt{'autoreqprov'} ) {
#
#		set_option( \%opt, 'autoreqprov', 1 );
#	}
#
#	if ( $opt{'noautoreq'} ) {
#
#		set_option( \%opt, 'autoreqprov', 0 );
#	}

	$opt{'autoreqprov'} = 1 unless defined($opt{'autoreqprov'});
	$opt{'autoreqprov'} = 0   if   defined($opt{'noautoreqprov'});

	## use critic
	return;
}
#########################################################
# used by find ( File::Find ) to be executed on each file
sub wanted {

	my $elem = $File::Find::name;
	parse_file( $elem, \%files, \%dirs, \%others );
	return;
}
#########################################################
# called by wanted on each file for given directories
# add file names to hash tables
# remove rootdir, quote names if needed, exclude patterns
sub parse_file($$$$) {
	my $elem     = shift @_;    # full real path to file
	my $r_files  = shift @_;
	my $r_dirs   = shift @_;
	my $r_others = shift @_;

	# exclude option
	if ( $opt{'exclude'} ) {
		if ( $elem =~ m/$opt{'exclude'}/ ) {
			return;
		}
	}

	# remove trailing slash to avoid duplicates
	$elem =~ s/\/$//;

	my $elem_spec = $elem;    # full path from builroot to file

	# rootdir option
	if ( $opt{'rootdir'} ) {
		$elem_spec =~ s/^$opt{'rootdir'}//;

		return unless ($elem_spec);
	}

	# files containing space must be quoted
	if ( $elem_spec =~ m/\s/ ) {
		$elem_spec = "\"$elem\"";
	}

	if ( -d $elem ) {
		$r_dirs->{$elem_spec} = 1;
	}
	elsif ( -f $elem ) {
		$r_files->{$elem_spec} = 1;
	}
	elsif ( -e $elem ) {
		$r_others->{$elem_spec} = 1;
	}
	else {
		warn "WARNING : can not find $elem\n";
	}
	return;
}
#########################################################
# what to do with given files/directories from command line
# use File::Find for recursive search
sub parse_files($$$) {
	my $r_files  = shift @_;
	my $r_dirs   = shift @_;
	my $r_others = shift @_;

	if ( $opt{'rootdir'} ) {

		# rootdir give also the root of files
		# to include : no arg necessary
		find( \&wanted, ( $opt{'rootdir'} ) );

		if ( !$opt{'name'} ) {

			# try to guess package name and version from rootdir
			my $rootdir = basename( $opt{'rootdir'} );
			if ( $rootdir =~ m/(\w+)-(.*)/ ) {
				$opt{'name'} = $1;
				$opt{'version'} = $2 if ( !$opt{'version'} );
			}
			else {
				$opt{'name'} = $1;
			}
			$opt{'release'} = 1 if ( !$opt{'release'} );
		}
	}
	else {
		my @input;
		if ( $opt{'stdin'} ) {
			@input = <>;
			chomp @input;
		}
		else {
			@input = @ARGV;

			# empty @ARGV :
			while ( pop @ARGV ) { }
		}

		# parse remaining arg
		foreach my $arg (@input) {
			if ( $arg !~ m{^/} ) {

				# transform relative path to absolute
				$arg = abs_path($arg);
			}
			parse_file( $arg, $r_files, $r_dirs, $r_others );
		}

		# expand directories (recursive)
		if ( keys %{$r_dirs} ) {
			find( \&wanted, keys %{$r_dirs} );
		}
	}
	return;
}
#########################################################
# write spec file
sub write_spec($$) {
	my $specfile = shift @_;
	my $r_specs  = shift @_;

	# save previous specfile
	if ( -f $specfile ) {
		rename $specfile, $specfile . '.old';
	}

	if ( open my $fh, '>', $specfile ) {
		print {$fh} @{$r_specs};
		close $fh or die "ERROR : can not close $specfile : $ERRNO\n";
		print "write spec file on $specfile\n";
	}
	else {
		die "ERROR : can not write in $specfile : $ERRNO\n";
	}
	return;
}
#########################################################
# from a meta name (from template), return the
# command line option name
sub get_opt_name($) {
	my $field = shift @_;    # ex _BUILDARCH_

	my $var = lc $field;
	$var =~ s/_//g;          # buildarch
	return $var;
}
#########################################################
# replace _FILES_ meta from template by the list
# of files with spec attributes
sub insert_files($$$$) {
	my $line     = shift @_;
	my $r_files  = shift @_;
	my $r_dirs   = shift @_;
	my $r_others = shift @_;

	my $in = q{};
	$in .= "\%dir $_\n" for keys %{$r_dirs};
	$in .= "$_\n"       for keys %{$r_others};
	foreach ( keys %{$r_files} ) {
		if ( is_config($_) ) {
			$in .= "\%config $_\n";
		}
		elsif ( is_doc($_) ) {
			$in .= "\%doc $_\n";
		}
		else {
			$in .= "$_\n";
		}
	}
	$line =~ s/_FILES_/$in/;
	return $line;
}
#########################################################
# check if the rpm working directories exists :
# specdir, rpmdir
sub check_builddir() {
	## no critic (ProhibitBacktickOperators)
	my $specdir = `rpm --eval %_specdir`;
	chomp $specdir;

	# check if specdir exists
	if ( !-d $specdir ) {

		# create all
		my $rpmdir = `rpm --eval %_rpmdir`;
		chomp $rpmdir;
		mkpath( $specdir, $rpmdir );
	}
	## use critic

	return $specdir;
}
#########################################################
sub get_template() {
	my @templates = split /\n/, $template;

	if ( $opt{'compat'} ) {
		foreach my $line (@templates) {
			if ( $line =~ m/# .*filedigest_algorithm 1/ ) {
				$line =~ s/^# //;
			}
		}
	}
	return @templates;
}
#########################################################
# build spec file from template
sub build_spec($$$) {
	my $r_files  = shift @_;
	my $r_dirs   = shift @_;
	my $r_others = shift @_;

	# help text for interactive entry
	my %desc = (
		summary => 'A brief one line description.',
		version => 'package version',
		release => 'The integer number of times you have built this rpm.',
		group   => 'toplevel_group/subclass (no biggie either way).',
		license => 'GPL/BSD/Artistic, etc',
		vendor  => 'origin',
		description =>
		  'A sales pitch for the package.  A blank line means you are done.',
		name => 'name of package',
	);

	# build spec file
	# replace meta-data from template from entry (query)
	my @templates = get_template();
	my @spec;
	my $name;    # package name
	foreach my $line (@templates) {
		$line .= "\n";

		## no critic (ProhibitCascadingIfElse)
		if ( $line =~ /_FILES_/ ) {
			$line = insert_files( $line, $r_files, $r_dirs, $r_others );
		}
		elsif ( $line =~ /(_ROOTDIR_)/ ) {
			my $meta  = $1;
			my $field = get_opt_name($meta);
			my $in    = ( $opt{$field} ) ? $opt{$field} : q{/};
			$line =~ s/$meta/$in/;
		}
		elsif ( $line =~ /(_BUILDARCH_|_URL_|_PACKAGER_|_VENDOR_|_LICENSE_|_AUTOREQPROV_)/ ) {

			# optionnals rpm tag
			my $meta  = $1;
			my $field = get_opt_name($meta);
			if ( defined $opt{$field} ) {
				my $in = $opt{$field};
				$line =~ s/$meta/$in/;
			}
			else {
				$line = q{};
			}
		}
		elsif ( $line =~ /(_DESCRIPTION_)/ ) {
			my $meta  = $1;
			my $field = get_opt_name($meta);
			my $in    = q{};
			if ( $opt{$field} ) {
				$in = $opt{$field};
			}
			else {
				print "$desc{$field}\n" if $desc{$field};
				{

					# description is a multi-line entry
					print uc $field . '> ';
					my $line = <>;
					chomp $line;
					$in .= "$line\n";
					redo if $line;
				}
			}
			$line =~ s/$meta/$in/;
		}
		elsif ( $line =~ /(_\w+_)/ ) {

			# others field are : SUMMARY, VERSION, RELEASE, NAME, GROUP
			# all in upper case
			my $meta  = $1;
			my $field = get_opt_name($meta);
			my $in;
			if ( $meta eq uc $meta ) {
				if ( $opt{$field} ) {
					print "$field: $opt{$field}\n";
					$in = $opt{$field};
				}
				else {

					# interactive entry for other meta-data
					print "$desc{$field}\n" if $desc{$field};
					print uc $field . '> ';
					$in = <>;
					chomp $in;
				}

				# build name
				if ( $field eq 'name' ) {
					$name = $in;
				}
				elsif ( $field eq 'version' ) {
					$name .= "-$in";
				}

				$line =~ s/$meta/$in/;
			}
		}
		## use critic
		push @spec, $line;
	}

	# write spec file
	my $specdir  = check_builddir();
	my $specfile = "$specdir/$name.spec";
	write_spec( $specfile, \@spec );
	return $specfile;
}
#########################################################
# edit spec file using EDITOR or vi
sub edit_spec($) {
	my $specfile = shift @_;

	my $editor = ( exists $ENV{'EDITOR'} ) ? $ENV{'EDITOR'} : 'vi';
	system "$editor $specfile";

	print 'do you want to build the rpm package ? (y/n) ';
	my $rep = lc <>;
	chomp $rep;
	if ( $rep eq 'y' ) {
		print "now build the rpm package\n";
	}
	elsif ( $rep eq 'n' ) {
		print "the rpm package will not be build\n";
		exit;
	}
	else {
		die "ERROR : bad answer $rep : exit\n";
	}
	return;
}
#########################################################
# get status of system command
# from perldoc -f system
sub system_status($) {
	my $status = shift @_;

	my $ret;
	if ( $status == -1 ) {
		warn "ERROR failed to execute: $ERRNO\n";
		$ret = 1;
	}
	elsif ( $status & 127 ) {
		warn 'ERROR child died with signal' . ( $status & 127 ) . "\n";
		$ret = 1;
	}
	else {
		$ret = $status >> 8;
	}
	return $ret;
}
#########################################################
# build rpm package
sub build_rpm($$) {
	my $specfile = shift @_;
	my $rpmbuild = shift @_;

	# build dummy buildroot :
	# recent rpm do not all buildroot on /
	# code from rpmorphan project
	# nota : this directory must match specfile (prep and clean section)
	my $buildroot = '/tmp/rpmerizor_buildroot';
	unlink $buildroot if ( -e $buildroot );

	my $rpm_opt = $opt{'buildall'} ? '-ba' : '-bb';
	if ( $opt{'verbose'} ) {
		$rpm_opt .= ' -v';
	}
	if ( $opt{'sign'} ) {
		$rpm_opt .= ' --sign';
	}
	system "$rpmbuild $rpm_opt --buildroot=$buildroot $specfile";
	my $ret = system_status($CHILD_ERROR);
	if ( $ret == 0 ) {

		## no critic (ProhibitBacktickOperators)
		my $rpmdir = `rpm --eval %_rpmdir`;
		## use critic
		print "package can be found on $rpmdir";
	}
	else {

		# cleaning if rpmbuild abort
		warn "ERROR : rpmbuild failed with status : $ret\n";
		unlink $buildroot if ( -e $buildroot );
	}
	return $ret;
}
#########################################################
# main
#########################################################
$OUTPUT_AUTOFLUSH = 1;
parse_otions();

parse_files( \%files, \%dirs, \%others );
if ( not( ( keys %dirs ) or ( keys %files ) ) ) {
	warn "ERROR : you have to give directories or file\n";
	pod2usage(1);
	exit;
}

# check rpmbuild and use system( cmd, args)
my $rpmbuild = search_in_path('rpmbuild');
if ( !$rpmbuild ) {
	die "ERROR : rpmbuild is not found\n";
}

my $specfile = build_spec( \%files, \%dirs, \%others );

if ( $opt{'spec_only'} ) {
	print "you can now build the rpm package with the following command\n"
	  . "rpmbuild -bb --buildroot=/tmp/rpmerizor_buildroot $specfile\n";
	exit;
}
elsif ( $opt{'edit_spec'} ) {
	edit_spec($specfile);
}

# build rpm package
my $ret = build_rpm( $specfile, $rpmbuild );

exit $ret;

__END__

=head1 NAME

rpmerizor - build an rpm package from installed files

=head1 VERSION

2.6

=head1 DESCRIPTION

Rpmerizor is a script that allows you to create an RPM package from installed files.
You simply have to specify files on the command line and answering a few interactive 
questions to fill rpm meta-data (package name, version ...). You can also use it in
batch mode with command line options for meta-data.

=head1 USAGE

to build an rpm from installed files :

rpmerizor {options} file|dir [file|dir [file|dir]]

to build an rpm from a chrooted directory which contain only the software you want to package

rpmerizor --rootdir directory

=head1 REQUIRED ARGUMENTS

  Files and directories to include in rpm package
  Files are included as they are on their current filesystem.
  Only include dirs that should be _owned_ by the package.

  Since 2.2 version, giving a directory means giving all
  files under it : this is recursive

=head1 OPTIONS

   --help : show short help text
   --man : show full help text
   --Version : display rpmerizor version and exit
   --debug : for rpmerizor debugging
   --verbose : better rpm build diagnostics
   --buildall : build also src.rpm package
   --edit_spec : build spec file and edit it using EDITOR variable
   --spec_only : build spec file and exit
   --sign : sign rpm package with your gpg key
   --list_group : display the list of available rpm groups
   --exclude 'foo[|bar]: give a pattern to exclude some files
   --rootdir dir : include all files as chrooted to dir directory. In this
   	case, name and version meta-data are guessed from directory name
   --compat : build rpm package with compatibility with old rpm release (md5)
   --default : fill release and group with default values
   --guess : guess about all meta data : package name, version ...
   --stdin : read file list from stdin. in this case, you have to give all
	meta-data from command line.

meta-informations for batch use

   --name pack_name: package name
   --version number : package version
   --release number : package release
   --group rpm_group : package group (use --list_group to list all values)
   --summary "package summary": short one line description
   --description "package description": multi-line description
   --buildarch arch : (optionnal) should be one of noarch/i386/i586/x86_64/...
   --url http://website : (optionnal) url of project
   --packager "your name" : (optionnal) name of rpm packager

=head1 DEPENDENCIES

rpm, perl

=head1 AUTHOR

  initial author : Paul Miller
  current maintener :  Eric Gerbier
  url : http://freshmeat.net/projects/rpmerizor

=head1 LICENSE AND COPYRIGHT

  Copyright (C) 2001 by Paul Miller

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

=head1 EXAMPLES

  rpmerizor /opt/software /etc/software.conf
  will ask for meta informations and build rpm

  rpmerizor -buildall /opt/software /etc/software.conf
  will ask for meta informations and build rpm and src.rpm

  rpmerizor -e /opt/software /etc/software.conf
  will ask for meta informations, edit specfile and build rpm

  rpmerizor -name software -version 1.0 -release 1 -group rpmerizor \
   -summary "software is ..." -description "software is ... " /opt/software /etc/software.conf
  will build rpm without any question (batch mode)

  rpmerizor -name software -version 1.0 -default \
   -summary "software is ..." -description "software is ... " /opt/software /etc/software.conf
  will build rpm without any question (batch mode), release and group use default value

  rpmerizor --spec_only /opt/software /etc/software.conf 
  rpmbuild -bb --buildroot=/tmp/rpmerizor_buildroot software.spec
  will first build the specfile, then build rpm package from specfile

  rpmerizor --exclude 'foo|bar' /opt/software
  will package files under /opt/software and exclude all files/directories
  which contain 'foo' or 'bar'

  rpmerizor --rootdir /tmp/foo-2.0/
  will build a package with all files under /tmp/foo-2.0/, but remove 
  '/tmp/foo-2.0/' from path
  if /tmp/foo-2.0 looks like :
  /tmp/foo-2.0
  |-- etc
  |   `-- foo.conf
  `-- usr
      `-- local
          |-- bin
	  |   `-- foo.bin
          `-- lib
               `-- foo.so
  the rpm package will be named foo, will be version 2.0, release 1
  and will contain the files:
   /etc/foo.conf
   /usr/local/bin/foo.bin
   /usr/local/lib/foo.so

  rpmerizor --rootdir /tmp/foo-2.0/ --compat
  build on fedora 14 (for example) for redhat/centos compatibility

  cat list | rpmerizor --stdin --default -name foo --version 1.2b --summary foo --description "toto"
  get list of directories/file from a pipe

  rpmerizor --guess /opt/software-2.0

=head1 DIAGNOSTICS

rpmerizor uses the prefix WARNING and ERROR for diagnostics

=head1 EXIT STATUS

0 if all is OK

>= 1 if the script detect a problem 

=head1 CONFIGURATION

no configuration file yet

=head1 INCOMPATIBILITIES

it is designed to work with rpm version 4 and greater

=head1 BUGS AND LIMITATIONS

  you can send your bug reports to gerbier@users.sourceforge.net

  if you are using the guess option, rpmerizor guess the package name and version from
  the first given directory. summary and description are filled with default comments.

=head1 ENVIRONMENT VARIABLES

to edit the specfile, the code use EDITOR if exists. 
Else, it use the vi editor

=head1 SEE ALSO

if you want to build an rpm package from a tar file, 
which contain a makefile, you should use checkinstall
(http://asic-linux.com.mx/~izto/checkinstall/)
