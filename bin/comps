#! /usr/bin/perl

################################################################
# usage:  comps NAME

# expects:	.xml		points to a comps.xml file
# expects:	.rpm		points to a directory of rpms

# creates:	NAME/		directory of group files
# creates:	NAME/group	kickstart packages in group
# creates:	NAME/.lang	aggregate of language groups

# Lines in the Group files are M, D, O, C for
# Mandatory, Default, Optional, and Conditional
# The letter x appears if the file is not found
################################################################

$DIST='CentOS';
$VER='5.4';

$banner = '#' x 64;

#$xml = $ARGV[0] || "comps.xml";

#($dir = $xml) =~ s/\.xml$//;	# nuke suffix
#($xml = $dir) =~ s/$/.xml/;	# add  suffix
#($pkg = $dir) =~ s/$/.pkg/;	# add  suffix

#warn("$dir, $xml, $pkg\n");	# DEBUG

# $dir =~ s%.*/%%;
# $dir =~ s/\.xml$//;
# $repo = $ARGV[1] || "/repo/$DIST/$VER/i386/$DIST";

#-d $dir || mkdir($dir) or die;

#@xml = stat $xml;
#warn("$xml @xml\n");		# DEBUG

$rpm =    -d '.rpm'   or warn("No .rpm directory\n");
open(STDIN, "<.xml")  or die("Missing .xml file\n");
open(LANG , ">.lang") or die;

sub id;
sub lang;
sub group;
sub splat;
sub item;

################################################################
#	Main Routine: read lines and process interesting ones
################################################################

line:
while (<STDIN>)
{
	chomp;
	/<langonly>/	and lang;
	/<group>/	and group;
	/<\/group>/	and splat;
	/<id>/		and id;
	/<packagereq /	and item;
	/<category>/	and last;
}

################################################################
#	Switch to Language Mode
################################################################

sub lang
{
	$norm = 0;
	select LANG;
	next line;
}

################################################################
#	Remember Group Name
################################################################

sub id
{
	$N = $1 if m%<id>(.*)</id>%;
	warn("\@$N\n");
	next line;
}

################################################################
#	New Group -- Initialize
################################################################

sub group
{
	$N = 'bogus'; $norm = 1;
	%M = %D = %O = %C = %X = ();
	# select NORM;
	next line;
}


################################################################
#	Dump Accumulated Info
################################################################

sub splat
{
	$M = $N;
	$M =~ s/^(core)$/0$1/;
	$M =~ s/^(base)$/1$1/;
	$M =~ s/^(base-x)$/2$1/;

	if ($norm) {
		open(NORM, ">$M") or
	die(   "open(NORM,  >$M ): $!\n");
		select NORM;
	} else {
		select LANG;
	}

	print("$banner\n");
	print("-\@$N\n");
	print("$banner\n\n");

	map	# existance test
		{ $X{$_} = $rpm ? (<.rpm/$_-*.rpm>)[0] ? '' : 'x' : 'q'; }
		keys(%M), keys(%D), keys(%O);

	map { print("#m$X{$_}\t-$_\n"); } sort(keys(%M));
	map { print("#d$X{$_}\t-$_\n"); } sort(keys(%D));
	map { print("#o$X{$_}\t $_\n"); } sort(keys(%O));
	map {printf("#c\t?%-31s %s\n", $_, $C{$_}); } sort(keys(%C));

	print("\n");
	close(NORM) if $norm;

	next line;
}

################################################################
#	Add Package to Mandatory, Default, Optional, or Conditional
################################################################

sub item
{
	s%packagereq%%g;
	s%'%"%g;
	$M{$1} = $1 if m%type="mandatory">(.*)</>%;
	$D{$1} = $1 if m%type="default">(.*)</>%;
	$O{$1} = $1 if m%type="optional">(.*)</>%;
	$C{$2} = $1 if m%type="conditional" requires="(.*)">(.*)</>%;
	next line;
}

################################################################
