#! /usr/bin/perl
################################################################
# usage:	comps		new usagw inside of subdir

# expects:	.xml		points to a comps.xml file
# expects:	.rpm		points to a directory of rpms

# creates:	.lang		aggregate of language groups
# creates:	.list		helper script
# creates:	group		kickstart packages in group
# creates:	..group		container for each group
# creates:	..group/?pkg	rpm detail of each package
# creates:	..group/+pkg	detail for mandatory packages
# creates:	..group/,pkg	detail for default   packages
# creates:	..group/-pkg	detail for optional  packages

# Lines in the Group files are M, D, O, C for
# Mandatory, Default, Optional, and Conditional
# The letter x appears if the file is not found
################################################################

# $DIST='CentOS';
# $VER='5.5';

$banner = '#' x 64;

$XML = ".xml$ARGV[0]";
$RPM = ".rpm$ARGV[0]";

$rpm =    -d "$RPM"   or warn("No .rpm directory\n");
open(STDIN, "<$XML")  or die("Missing $XML file\n");
open(LANG , ">.lang") or die;
open(LIST , ">.list") or die;

sub id;
sub lang;
sub group;
sub splat;
sub item;

################################################################
#	Main Routine: read lines and process interesting ones
################################################################

printf LIST "#! /bin/sh -x\n";

line:
while (<STDIN>)
{
	chomp;
	/<langonly>/	and lang;
	/<group>/	and group;
	/<\/group>/	and splat;
	/<id>/		and id;
	/<packagereq /	and item;
	/<category>/	and last;
}

printf LIST "\n: END\n";
close LANG; close LIST;

################################################################
#	Switch to Language Mode
################################################################

sub lang
{
	$norm = 0;
	select LANG;
	next line;
}

################################################################
#	Remember Group Name
################################################################

sub id
{
	$N = $1 if m%<id>(.*)</id>%;
	warn("\@$N\n");
	next line;
}

################################################################
#	New Group -- Initialize
################################################################

sub group
{
	$N = 'bogus'; $norm = 1;
	%M = %D = %O = %C = %X = ();
	# select NORM;
	next line;
}


################################################################
#	Dump Accumulated Info
################################################################

sub splat
{
	$M = $N;
	`mkdir -p .pkgs`;
	for ($M)
	{
		s/^(core)$/0$1/;
		s/^(standard)$/1$1/;
		s/^(base)$/1$1/;
		s/^(base-x)$/2$1/;
		s/^(x11)$/2$1/;
		s/^(legacy-x)$/2$1/;
		s/^(legacy-fonts)$/2$1/;
		s/^(fonts)$/2$1/;
		s/openfabrics-enterprise-distribution/OFED/;
		s/engineering-and-scientific/ENG-SCI/;
		s/authoring-and-publishing/AUTH-PUB/;
		s/software/SW/;
		s/development/DEV/;
	}

	if ($norm) {
		open(NORM, ">$M") or
	die(   "open(NORM,  >$M ): $!\n");
		open(PKGS, ">.pkgs/$M") or
	die(   "open(PKGS,  >.pkgs/$M ): $!\n");
		select NORM;
	} else {
		select LANG;
	}

	print("%packages --ignoremissing\n");
	print("\t$banner\n");
	print("####\t\@$N\n");
	print("\t$banner\n\n");

	map	# existance test
		{ $X{$_} = $rpm ? (	((<$RPM/$_-*.rpm>  )[0])  ||
					((<$RPM/?/$_-*.rpm>)[0])
				  ) ? '' : 'x' : 'q';
		}
		keys(%M), keys(%D), keys(%O); # /

		print( "\t#MANDATORY\n");
	map {	print( "\t#m$X{$_}\t-$_\n"); } sort(keys(%M));
		print( "\t#DEFAULT\n");
	map {	print( "\t#d$X{$_}\t-$_\n"); } sort(keys(%D));
		print( "\t#OPTIONAL\n");
	map {	print( "\t#o$X{$_}\t $_\n"); } sort(keys(%O));
	map {	printf("\t#c\t?%-31s %s\n", $_, $C{$_}); } sort(keys(%C));

	print("\n\t$banner\n%end\n");

	do {
		select PKGS;
		map { print("$_\n"); } sort(keys(%M));
		map { print("$_\n"); } sort(keys(%D));
		map { print("$_\n"); } sort(keys(%O));
		map { print("$_\n"); } sort(keys(%C));
	} if $norm;

#	print("\n") ;# unless($norm);	??? WHY ???
	close(NORM) if $norm;
	close(PKGS) if $norm;
	return unless  $norm;

	select LIST;
	printf "\nmkdir -p ..$M\n";
	$QILP = "rpm -qilp $RPM/%s-[0-9]*.rpm > ..$M/%s%s\n";

	%M	and	$TYPE = '+'	and
	print(": ::::::::::::\n")	and
	print(": Mandatory :: $M\n")	and
	print(": ::::::::::::\n")	and
	map { printf "$QILP", $_, $TYPE, $_; } sort(keys(%M));

	%D	and	$TYPE = ','	and
	print(": ::::::::::\n")		and
	print(": Default :: $M\n")	and
	print(": ::::::::::\n")		and
	map { printf "$QILP", $_, $TYPE, $_; } sort(keys(%D));

	%O	and	$TYPE = '-'	and
	print(": :::::::::::\n")	and
	print(": Optional :: $M\n")	and
	print(": :::::::::::\n")	and
	map { printf "$QILP", $_, $TYPE, $_; } sort(keys(%O));

	%C	and	$TYPE = '?'	and
	print(": ::::::::::::::\n")	and
	print(": Conditional :: $M\n")	and
	print(": ::::::::::::::\n")	and
	map { printf "$QILP", $_, $TYPE, $_; } sort(keys(%C));
	next line;
}

################################################################
#	Add Package to Mandatory, Default, Optional, or Conditional
################################################################

sub item
{
	s%packagereq%%g;
	s%'%"%g;
	$M{$1} = $1 if m%type="mandatory">(.*)</>%;
	$D{$1} = $1 if m%type="default">(.*)</>%;
	$O{$1} = $1 if m%type="optional">(.*)</>%;
	$C{$2} = $1 if m%type="conditional" requires="(.*)">(.*)</>%;

	next line;
}

################################################################
